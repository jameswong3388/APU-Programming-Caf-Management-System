Record Structures
sessions
    session_code S
    title
    day
    start_time
    location
    tutor_code

enrolled_sessions
    session_code
    user_id
    name
    role

users
    user_id
    name
    password
    email
    role

tutor_profiles
    user_id
    tutor_code
    title
student_profiles
    user_id
    student_code

Module declarations
/* void main() */
main
    setup
    home_menu
END

/* void home_menu() */
home_menu
    SET flag = 1
    DOWHILE flag = 1
        PRINT "Welcome to APU Programming Cafe Management System!"
        PRINT "1. Login
        PRINT "2. View available sessions
        PRINT "0. Exit

        SET option
        PRINT "Please select an option below: "

        IF GET INPUT NOT int THEN
            PRINT "[SERVER WARNING] Invalid input. Please enter a numeric integer."
            DOWHILE getchar NOT '\n'
            ENDO
            CONTINUE
        ENIF

        SET response = 0

        CASE OF option
            1:
                SET response = login_menu
                IF response = 0 THEN
                    SET flag = 0
                ENDIF
                BREAK
            2:
                available_sessions_menu
                BREAK
            3:
                SET flag = 0
                PRINT "[SERVER INFO] Thank you for using APU Programming Cafe Management System!"
                BREAK
            DEFAULT:
                PRINT "[SERVER WARNING] Invalid option. Please try again."
        ENDCASE
    ENDO
END

/* void available_sessions_menu() */
available_sessions_menu
    title_printer("Available sessions")
    SET num_lines

    SET lines = read("sessions.txt")

    SET session FROM STRUCTURE sessions

    IF NOT lines NULL THEN
        dash_printer(98)
        PRINT "No. | Session code | Title | Day | Start time | Location | Tutor code"
        dash_printer(98)
        DO i = 0 TO num_lines
            SET session.session_code = SPLIT ";" FROM lines[i]
            SET session.title = SPLIT ";" FROM lines[i]
            SET session.day = SPLIT ";" FROM lines[i]
            SET session.start_time = SPLIT ";" FROM lines[i]
            SET session.location = SPLIT ";" FROM lines[i]
            SET session.tutor_code = SPLIT ";" FROM lines[i]

            PRINT "{session.session_code} {session.title} {session.day} {session.start_time} {session.location} {session.tutor_code}"
        ENDDO
        dash_printer(98)
    ENDIF

    DO i = 0 TO num_lines
        FREE lines[i]
    ENDDO

    FREE lines
END

/* int login_menu() */
login_menu
    title_printer("Login page")

    SET users_file = FILE OPEN "users.txt" WITH "r"

    SET authenticated = 0
    SET login_attempts = 0

    SET max_login_attempts = 3

    DOWHILE login_attempts < max_login_attempts
        SET user FROM STRUCTURE users

        SET user_id
        SET password

        PRINT "Please enter your User Code (TP number or Tutor code) down below: "
        GET INPUT user_id
        "Please enter your password down below: "
        GET INPUT password

        SET response = user_code_parser(user_id)

        IF response = 0 THEN
            DOWHILE fscanf(users_file, "%[^;];%[^;];%[^;];%[^;];%[^;];\n", user.user_id, user.name, user.password,
                                          user.email, user.role) NOT EOF
                IF user.user_id = user_id AND user.password = password THEN
                    SET authenticated = 1
                    BREAK
                ENDIF
            ENDDO
        ENDIF

        IF authenticated = 1 THEN
            FILE CLOSE users_file
            PRINT "[SERVER INFO] Login successful {user.name} ({user.role})!"
            IF user.role = "admin" THEN
                admin_dashboard_menu(user)
            ELSE IF user.role = "tutor" THEN
                tutor_dashboard_menu(user)
            ELSE IF user.role = "student" THEN
                student_dashboard_menu(user)
            ENDIF
            BREAK
        ELSE
            login_attempts = login_attempts + 1
            PRINT [SERVER WARNING] Login id or password is incorrect, {login_attempts} attempts left. Please try again."
        ENDIF
    ENDDO

    FILE CLOSE users_file
    PRINT "[SERVER ERROR] Max login attempts reached. Exiting program."
    RETURN authenticated
END

/* void admin_dashboard_menu(user) */
admin_dashboard_menu(user)
    SET flag = 1

    DOWHILE flag = 1
        title_printer("Dashboard")
        printf "Welcome {session_user.name} ({session_user.role}) !"
        printf "1. User operation"
        printf "2. Session operation."
        printf "0. Logout"

        SET option
        PRINT "Please select an option below: "
        IF GET INPUT NOT int THEN
            PRINT "[SERVER WARNING] Invalid input. Please enter a numeric integer."
            DOWHILE getchar NOT '\n'
            ENDO
            CONTINUE
        ENDIF

        CASE OF option
            1:
                user_operation_menu(session_user)
                BREAK
            2:
                session_operation_menu(session_user)
                BREAK
            3:
                SET flag = 0
                BREAK
            DEFAULT:
                PRINT "[SERVER WARNING] Invalid option. Please try again."
                BREAK
        ENDCASE
    ENDDO
END

/* void user_operation_menu(user) */
user_operation_menu(user)
    SET flag = 1
    DOWHILE flag
        title_printer("User operation")
        PRINT "1. Add user."
        PRINT "2. Delete user."
        PRINT "3. View all user."
        PRINT "4 .View user profile."
        PRINT "0. Back to dashboard."
        SET OPTION
        PRINT "Please select an option below: "

        IF GET INPUT NOT int THEN
            PRINT "[SERVER WARNING] Invalid input. Please enter a numeric integer."
            DOWHILE getchar NOT '\n'
            ENDO
            CONTINUE
        ENDIF

        CASE OF option
            1:
                add_user_menu(session_user)
                BREAK
            2:
                delete_user_menu(session_user)
                BREAK
            3:
                view_all_user_menu(session_user)
                BREAK
            4:
                view_user_menu(session_user)
                BREAK
            0:
                SET flag = 0
                BREAK
            DEFAULT:
                PRINT "[SERVER WARNING] Invalid option. Please try again."
                BREAK
        ENDCASE
    ENDDO
END

/* void add_user_menu(users session_user) */
add_user_menu(users session_user)
    SET user FROM STRUCTURE users
    title_printer("User operation - Add user")

    DOWHILE 1
        PRINT "Please enter the user's role (student or tutor) down below: "
        GET INPUT user.role
        IF user.role NOT "student" OR user.role NOT "tutor" THEN
            PRINT "[SERVER WARNING] Invalid role. Please try again."
            BREAK
        ELSE
            PRINT "[SERVER ERROR] Invalid role. Please try again."
        ENDIF
    ENDO

    PRINT "Please enter the user's name down below: "
    GET INPUT user.name

    DOWHILE 1
        PRINT "Please enter the user's user id down below: "
        GET INPUT user.user_id
        IF user.user_id LENGTH = 6 THEN
            BREAK
        ELSE
            PRINT "[SERVER WARNING] User id must be exactly 6 characters long. Please try again."
        ENDIF
    ENDO

    DOWHILE 1
        PRINT "Please enter the user's password down below: "
        GET INPUT user.password
        IF user.user_id LENGTH >= 8 THEN
            BREAK
        ELSE
            PRINT "[SERVER WARNING] Password must be at least 8 characters long. Please try again."
        ENDIF
    ENDO

    PRINT "Please enter the user's email down below: "
    GET INPUT user.email

    IF user.role = "student" THEN
        SET student_code
        SET student FROM STRUCTURE student_profiles

        student.user_id = user.user_id
        student_code = "TP" + user.user_id
        student.student_code = student_code

        SET student_profiles_file = FILE OPEN "student_profiles.txt" WITH "a"
        PRINT student INTO student_profiles_file
        FILE CLOSE student_profiles_file
    ENDIF

    IF user.role = "tutor" THEN
        SET tutor FROM STRUCTURE tutor_profiles
        SET tutor_code

        PRINT "Please enter the tutor's title down below: "
        GET INPUT tutor.title

        tutor.user_id = user.user_id
        tutor_code = "TU" + user.user_id
        tutor.tutor_code = tutor_code

        SET tutor_profiles_file = FILE OPEN "tutor_profiles.txt" WITH "a"
        PRINT tutor INTO tutor_profiles_file
        FILE CLOSE tutor_profiles_file
    ENDIF

    SET users_file = FILE OPEN "users.txt" WITH "a"
    PRINT user INTO users_file
    FILE CLOSE users_file
    PRINT "[SERVER INFO] User added successfully!"
END

/* void delete_user_menu(users session_user) */
delete_user_menu(users session_user)
    title_printer("User operation - Delete user")
    SET user_id

    PRINT "Please enter the user code of the user you want to delete: "
    GET INPUT user_id

    SET response = user_code_parser(user_id)

    IF RESPONSE = 0 THEN
        PRINT "[SERVER WARNING] Invalid user code."
        RETURN
    ENDIF

    SET user FROM STRUCTURE users = get_user(user_id)

    IF user.user_id = "" THEN
        PRINT "[SERVER ERROR] User does not exist."
        RETURN
    ELSE
        SET users_temp_file = FILE OPEN "users_temp.txt" WITH "w"
        SET users_file = FILE OPEN "users.txt" WITH "r"

        SET is_student = 0
        SET is_tutor = 0

        DOWHILE  fscanf(users_file, "%[^;];%[^;];%[^;];%[^;];%[^;];\n", user.user_id, user.name, user.password,
                                           user.email, user.role) NOT EOF
            IF NOT user.user_id = user_id THEN
                STORE user INTO temp_users_file
            ELSE
                IF user.role = "student" THEN
                    SET is_student = 1
                ELSE IF user.role = "tutor" THEN
                    SET is_tutor = 1
                ENDIF
            ENDIF
        ENDO

        FILE CLOSE users_file
        FILE CLOSE users_temp_file

        FILE REMOVE "users.txt"
        FILE RENAME "users_temp.txt" TO "users.txt"

        IF is_student = 1 THEN
            SET student_profiles_file = FILE OPEN "student_profiles.txt" WITH "r"
            SET student_profiles_temp_file = FILE OPEN "student_profiles_temp.txt" WITH "w"

            SET student FROM STRUCTURE student_profiles

            DOWHILE NOT fscanf(student_profiles_file, "%[^;];%[^;];\n", student.user_id, student.student_code) = EOF
                IF student.user_id NOT user_id THEN
                    STORE student INTO student_profiles_temp_file
                ENDIF
            ENDDO

            FILE CLOSE student_profiles_file
            FILE CLOSE student_profiles_temp_file

            FILE REMOVE "student_profiles.txt"
            FILE RENAME "student_profiles_temp.txt" TO "student_profiles.txt"

            PRINT "[SERVER INFO] User deleted successfully!"
        ENDIF

        IF is_tutor = 1 THEN
            SET tutor_profiles_file = FILE OPEN "tutor_profiles.txt" WITH "r"
            SET tutor_profiles_temp_file = FILE OPEN "tutor_profiles_temp.txt" WITH "w"

            SET tutor FROM STRUCTURE

            DOWHILE NOT fscanf(tutor_profiles_file, "%[^;];%[^;];%[^;];\n", tutor.user_id, tutor.tutor_code, tutor.title) = EOF
                IF tutor.user_id NOT user_id THEN
                    STORE tutor INTO tutor_profiles_temp_file
                ENDIF
            ENDDO

            FILE CLOSE tutor_profiles_file
            FILE CLOSE tutor_profiles_temp_file

            FILE REMOVE "tutor_profiles.txt"
            FILE RENAME "tutor_profiles_temp.txt" TO "tutor_profiles.txt"

            PRINT "[SERVER INFO] User deleted successfully!"
        ENDIF
    ENDIF
END

/* void view_all_user_menu(users session_user) */
view_all_user_menu(users session_user)
    title_printer("User operation - View user")

    SET number_lines
    SET lines = read("sessions.txt")

    SET user FROM STRUCTURE users

    IF NOT lines = NULL THEN
        dash_printer(91)
        PRINT "No. | User id | Name | Email | Password | Role |"
        dash_printer(91)
        DO i = 0 TO num_lines
            SET session.user_id = SPLIT ";" FROM lines[i]
            SET session.name = SPLIT ";" FROM lines[i]
            SET session.password = SPLIT ";" FROM lines[i]
            SET session.email = SPLIT ";" FROM lines[i]
            SET session.role = SPLIT ";" FROM lines[i]

            PRINT "{user.user_id} {user.name} {user.password} {user.email} {user.role}"
        ENDDO
        dash_printer

        DO i = 0 TO num_lines
            FREE lines[i]
        ENDDO

        FREE lines
    ENDIF
END